import cv2
import numpy as np
from ultralytics import YOLO
import supervision as sv  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Supervision

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLO11X
model = YOLO("yolo11x.pt")

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
video_path = "50kmh_ropazi.mov"
cap = cv2.VideoCapture(video_path)

if not cap.isOpened():
    print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ.")
    exit()

# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä
ret, frame = cap.read()
if not ret:
    print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å –∫–∞–¥—Ä.")
    cap.release()
    exit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = int(cap.get(cv2.CAP_PROP_FPS))

# –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (—á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä –≤–ª–µ–∑–∞–ª –≤ —ç–∫—Ä–∞–Ω)
screen_width, screen_height = 1280, 720
scale = min(screen_width / frame_width, screen_height / frame_height)
new_width = int(frame_width * scale)
new_height = int(frame_height * scale)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏
output_path = "output.mp4"
fourcc = cv2.VideoWriter_fourcc(*'mp4v')  # –ö–æ–¥–µ–∫ –¥–ª—è MP4
out = cv2.VideoWriter(output_path, fourcc, fps, (frame_width, frame_height))

# üü• –í—ã–±–æ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫—Ä–∞—Å–Ω–æ–π —Ä–∞–º–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
if "jaunolaine" in video_path.lower():
    x1, y1 = 5200, 3000  # Aug≈°ƒìjais labais st≈´ris 
    x2, y2 = 4100, 3000  # Aug≈°ƒìjais kreisais st≈´ris
    x3, y3 = 7500, 6000  # Apak≈°ƒìjais kreisais st≈´ris
    x4, y4 = 10700, 4600 # Apak≈°ƒìjais labais st≈´ris
    distance_m = 200  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ (–º–µ—Ç—Ä—ã)
elif "ropazi" in video_path.lower():
    x1, y1 = 6400, 2900  # Aug≈°ƒìjais labais st≈´ris
    x2, y2 = 5700, 2900  # Aug≈°ƒìjais kreisais st≈´ris
    x3, y3 = 500, 5800   # Apak≈°ƒìjais kreisais st≈´ris
    x4, y4 = 6900, 5800  # Apak≈°ƒìjais labais st≈´ris
    distance_m = 150  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ (–º–µ—Ç—Ä—ã)
else:
    print("–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'jaunolaine' –∏–ª–∏ 'ropazi'. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª.")
    cap.release()
    exit()

# –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫ –º–∞—Å—à—Ç–∞–±—É –∫–∞–¥—Ä–∞
x1, x2, x3, x4 = int(x1 * scale), int(x2 * scale), int(x3 * scale), int(x4 * scale)
y1, y2, y3, y4 = int(y1 * scale), int(y2 * scale), int(y3 * scale), int(y4 * scale)

# –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–Ω—É—é —Ä–∞–º–∫—É (–±–µ–∑ –º–∞—Å–∫–∏)
pts = np.array([[x1, y1], [x2, y2], [x3, y3], [x4, y4]], np.int32)

# üî¥ **–í—ã–≤–æ–¥ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞ —Å –∫—Ä–∞—Å–Ω–æ–π —Ä–∞–º–∫–æ–π**
frame_with_zone = frame.copy()
cv2.polylines(frame_with_zone, [pts], isClosed=True, color=(0, 0, 255), thickness=3)
resized_frame = cv2.resize(frame_with_zone, (new_width, new_height))  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–∫–Ω–∞
cv2.imshow("–û–±–ª–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–∞ (–ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä)", resized_frame)
cv2.waitKey(0)
cv2.destroyAllWindows()

# üü¢ Supervision: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–Ω–æ—Ç–∞—Ç–æ—Ä–æ–≤
box_annotator = sv.BoxAnnotator(color=sv.Color.GREEN, thickness=2)  # –†–∞–º–∫–∞
label_annotator = sv.LabelAnnotator()  # –ü–æ–¥–ø–∏—Å–∏

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∞—à–∏–Ω (ID -> –≤—Ä–µ–º—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü)
vehicle_timestamps = {}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ –≤–∏–¥–µ–æ
frame_count = 0
cap.set(cv2.CAP_PROP_POS_FRAMES, 0)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break  # –ö–æ–Ω–µ—Ü –≤–∏–¥–µ–æ

    frame_time = frame_count / fps  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞ (—Å–µ–∫—É–Ω–¥—ã)
    frame_count += 1

    # –ó–∞–ø—É—Å–∫–∞–µ–º YOLO –Ω–∞ –ø–æ–ª–Ω–æ–º –∫–∞–¥—Ä–µ (üöó —Ç–µ–ø–µ—Ä—å –≤–∏–¥–∏—Ç –º–∞—à–∏–Ω—É –≤–µ–∑–¥–µ!)
    results = model(frame)

    detections = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω
    confidences = []  # –°–ø–∏—Å–æ–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    class_ids = []  # –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤
    labels = []  # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∏

    for result in results:
        for box in result.boxes:
            x_min, y_min, x_max, y_max = map(int, box.xyxy[0])
            conf = box.conf[0].item()
            cls = int(box.cls[0].item())

            # üîπ –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–∞—à–∏–Ω—ã (–∫–ª–∞—Å—Å "car")
            if cls != 2:
                continue

            # üîπ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –±–æ–∫—Å–æ–≤
            x_min = max(x_min, 0)
            y_min = max(y_min, 0)
            x_max = min(x_max, frame_width)
            y_max = min(y_max, frame_height)

            # üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –º–∞—à–∏–Ω—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
            vehicle_id = (x_min, x_max)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä

            # üîπ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–π –∏ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
            if vehicle_id not in vehicle_timestamps:
                if y_min <= y1:  # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
                    vehicle_timestamps[vehicle_id] = {"start": frame_time, "end": None}
            else:
                if y_max >= y3 and vehicle_timestamps[vehicle_id]["end"] is None:  # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
                    vehicle_timestamps[vehicle_id]["end"] = frame_time

            # üîπ –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è Supervision
            detections.append([x_min, y_min, x_max, y_max])
            confidences.append(conf)
            class_ids.append(cls)

            # üîπ –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É
            labels.append(f"Car {conf:.2f}")

    if detections:
        detections_np = np.array(detections)
        confidences_np = np.array(confidences)
        class_ids_np = np.array(class_ids)

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Detections
        detections_sv = sv.Detections(xyxy=detections_np, confidence=confidences_np, class_id=class_ids_np)

        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –±–æ–∫—Å—ã
        frame = box_annotator.annotate(scene=frame, detections=detections_sv)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –Ω–∞–¥ —Ä–∞–º–∫–∞–º–∏
        frame = label_annotator.annotate(scene=frame, detections=detections_sv, labels=labels)

    # –†–∏—Å—É–µ–º –∫—Ä–∞—Å–Ω—É—é —Ä–∞–º–∫—É –≤–æ–∫—Ä—É–≥ –∑–æ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–∞
    cv2.polylines(frame, [pts], isClosed=True, color=(0, 0, 255), thickness=2)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–∞–¥—Ä –≤ —Ñ–∞–π–ª
    out.write(frame)

# –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
for vehicle_id, times in vehicle_timestamps.items():
    if times["start"] is not None and times["end"] is not None:
        travel_time = times["end"] - times["start"]  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        speed_kmh = (distance_m / travel_time) * 3.6  # –ü–µ—Ä–µ–≤–æ–¥ –≤ –∫–º/—á
        print(f"üöó –ú–∞—à–∏–Ω–∞ {vehicle_id} -> –°–∫–æ—Ä–æ—Å—Ç—å: {speed_kmh:.2f} –∫–º/—á")

# –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
cap.release()
out.release()
cv2.destroyAllWindows()

print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {output_path}")
